{"componentChunkName":"component---src-templates-the-notebook-js","path":"/the-notebook/ops/docker","result":{"data":{"content":{"frontmatter":{"title":"Docker","path":"the-notebook/ops/docker","type":"docs"},"html":"<h3>Docker</h3>\n<h4>Build image</h4>\n<p>docker build -t ${IMAGE}:${VERSION} ${LOCATION}</p>\n<pre><code>docker build -t hub.dezenter.org/dezenter/web:0.1.0 .\n</code></pre>\n<h4>tag image to private registry</h4>\n<ul>\n<li>\n<p>docker image tag &#x3C;local<em>image:tag> <host>/&#x3C;host</em>image:tag></p>\n<pre><code>docker image tag dezenter/air:0.1.0 hub.dezenter.org/dezenter/air:0.1.0\n</code></pre>\n</li>\n</ul>\n<h4></h4>\n<ul>\n<li>\n<p>docker image push <host>/&#x3C;host<em>image>/&#x3C;project</em>name>:<tag></p>\n<pre><code>docker image push hub.dezenter.org/dezenter/air:0.1.0\n</code></pre>\n</li>\n</ul>\n<h4>use command</h4>\n<ul>\n<li>\n<p>docker exec -it &#x3C;container_name> <command></p>\n<pre><code>docker exec -it docker_test bash\n</code></pre>\n</li>\n</ul>\n<h4>copy</h4>\n<p>docker cp</p>\n<ul>\n<li>\n<p>host to container <file> &#x3C;container<em>name>:/&#x3C;to</em>path></p>\n<pre><code>docker cp rabbitmqadmin docker_rabbitmq_1:/usr/local/bin\n</code></pre>\n</li>\n<li>\n<p>container to host &#x3C;container<em>name>:/<path>/<file> &#x3C;to</em>path></p>\n<pre><code>docker cp jenkins:/var/jenkins_home/secrets/initialAdminPassword C:/Users/tdcm025\n</code></pre>\n</li>\n</ul>\n<h4>remove file</h4>\n<ul>\n<li>\n<p>docker exec <container-name> rm -rf <file></p>\n<pre><code>docker exec docker_rabbitmq_1 rm -rf rmq-setup.sh\n</code></pre>\n</li>\n</ul>\n<h4>remove volume data</h4>\n<ul>\n<li>docker volume ls</li>\n<li>\n<p>docker volume rm <name></p>\n<pre><code>docker volume rm docker_rabbitmq-data\n</code></pre>\n</li>\n<li>\n<p>ex remove all volume</p>\n<pre><code>docker volume rm `docker volume ls -q -f dangling=true`\n</code></pre>\n</li>\n<li>\n<p>removing only unused volumes:</p>\n<pre><code>docker volume prune\n</code></pre>\n</li>\n</ul>\n<h4>image</h4>\n<pre><code>docker image prune => remove none used\n</code></pre>\n<h4>container</h4>\n<pre><code>docker container prune => remove none used container\n</code></pre>\n<h4>check disk</h4>\n<pre><code>docker system df\n</code></pre>\n<h3>Docker Compose</h3>\n<h4>Build image</h4>\n<h5>version 3</h5>\n<ul>\n<li>links:  ผูก service เข้าด้วยกัน รูปแบบ Sevice name:Alias name</li>\n<li>depens_on: start service หลังจาก service ที่อยู่ depend on เริ่มต้นการทำงานเสร็จแล้ว</li>\n</ul>\n<h4>run</h4>\n<ul>\n<li>docker-compose run -d --build</li>\n</ul>\n<h4>build</h4>\n<ul>\n<li>docker-compose build</li>\n</ul>\n<h4>exec</h4>\n<ul>\n<li>docker-compose exec -it <name> bash</li>\n</ul>\n<h4>.env</h4>\n<ul>\n<li>ใน environment ใช้ $$ => ex: VAR=$${VARS}</li>\n</ul>\n<h4>link</h4>\n<ul>\n<li><a href=\"https://training.play-with-docker.com\">training</a></li>\n</ul>\n<p>--remove-orphans</p>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"pathSlug":"the-notebook/ops/docker"}}}